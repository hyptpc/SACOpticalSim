#include "MPPCSD.hh"

#include "G4SDManager.hh"
#include "G4Step.hh"
#include "G4Track.hh"
#include "G4OpticalPhoton.hh"
#include "G4HCofThisEvent.hh"
#include "G4EventManager.hh"
#include "Randomize.hh"

#include "TGraph.h"
#include "TSpline.h"

MPPCSD::MPPCSD(const G4String& name)
  : G4VSensitiveDetector(name),
    m_qe_spline(nullptr),
    m_range_min(1. * CLHEP::eV),
    m_range_max(7. * CLHEP::eV)
{
    collectionName.insert("MppcCollection");

    InitializeQESpline();
}

MPPCSD::~MPPCSD() {
  delete m_qe_spline;
}

//_____________________________________________________________________________
void MPPCSD::Initialize(G4HCofThisEvent* HCTE)
{
  m_hits_collection = new G4THitsCollection<MPPCHit>(SensitiveDetectorName,
						     collectionName[0]);
  HCTE->AddHitsCollection(GetCollectionID(0), m_hits_collection);
}


//_____________________________________________________________________________
G4bool MPPCSD::ProcessHits(G4Step *aStep, G4TouchableHistory *ROhist)
{
  const auto preStepPoint = aStep->GetPreStepPoint();
  const auto aTrack = aStep->GetTrack();
  const auto Definition = aTrack->GetDefinition();
  const G4String particleName = Definition->GetParticleName();
  const G4String particleType = Definition->GetParticleType();
  const G4int    particleID   = Definition->GetPDGEncoding();
  
  G4ThreeVector worldPos = preStepPoint->GetPosition();
  G4ThreeVector pos      = preStepPoint->GetTouchable()->GetHistory()->GetTopTransform().TransformPoint(worldPos);
  G4double hitTime = preStepPoint->GetGlobalTime();
  G4double energy = aTrack->GetTotalEnergy();
  G4double waveLength = (CLHEP::h_Planck * CLHEP::c_light / energy) / CLHEP::nm;
  G4int copyNumber  = preStepPoint->GetTouchableHandle()->GetCopyNumber();
  G4int eventID = G4EventManager::GetEventManager()->GetConstCurrentEvent()->GetEventID();
  G4int detectFlag = 0;
  
  // -- kill track -----
  aTrack->SetTrackStatus(fStopAndKill);

  if (m_range_min <= energy && energy <= m_range_max) {
    G4double qe_value = m_qe_spline->Eval(energy);
    G4double random_value = G4UniformRand();
    if (random_value <= qe_value) {
      detectFlag = 1;
    }
  }

  // -- record -----
  MPPCHit* aHit = new MPPCHit();
  aHit->SetPosition(pos);
  aHit->SetWorldPosition(worldPos);
  aHit->SetEnergy(energy);
  aHit->SetWaveLength(waveLength);
  aHit->SetTime(hitTime);
  aHit->SetParticleID(particleID);
  aHit->SetCopyNumber(copyNumber);
  aHit->SetEventID(eventID);
  aHit->SetDetectFlag(detectFlag);
  
  m_hits_collection->insert(aHit);

  
  return true;
}

//_____________________________________________________________________________
void MPPCSD::EndOfEvent(G4HCofThisEvent*)
{
}

//_____________________________________________________________________________
void MPPCSD::InitializeQESpline()
{
  using CLHEP::eV;
  std::vector<G4double> photon_energy{
    1.3811 * eV, 1.3829 * eV, 1.3846 * eV, 1.3864 * eV, 1.3882 * eV, 1.3899 * eV,
    1.3917 * eV, 1.3935 * eV, 1.3953 * eV, 1.3971 * eV, 1.3989 * eV, 1.4007 * eV,
    1.4025 * eV, 1.4043 * eV, 1.4061 * eV, 1.4079 * eV, 1.4098 * eV, 1.4116 * eV,
    1.4134 * eV, 1.4153 * eV, 1.4171 * eV, 1.4190 * eV, 1.4208 * eV, 1.4227 * eV,
    1.4245 * eV, 1.4264 * eV, 1.4283 * eV, 1.4302 * eV, 1.4321 * eV, 1.4339 * eV,
    1.4358 * eV, 1.4377 * eV, 1.4396 * eV, 1.4415 * eV, 1.4435 * eV, 1.4454 * eV,
    1.4473 * eV, 1.4492 * eV, 1.4512 * eV, 1.4531 * eV, 1.4551 * eV, 1.4570 * eV,
    1.4590 * eV, 1.4609 * eV, 1.4629 * eV, 1.4649 * eV, 1.4668 * eV, 1.4688 * eV,
    1.4708 * eV, 1.4728 * eV, 1.4748 * eV, 1.4768 * eV, 1.4788 * eV, 1.4808 * eV,
    1.4828 * eV, 1.4849 * eV, 1.4869 * eV, 1.4889 * eV, 1.4910 * eV, 1.4930 * eV,
    1.4951 * eV, 1.4971 * eV, 1.4992 * eV, 1.5013 * eV, 1.5034 * eV, 1.5054 * eV,
    1.5075 * eV, 1.5096 * eV, 1.5117 * eV, 1.5138 * eV, 1.5159 * eV, 1.5181 * eV,
    1.5202 * eV, 1.5223 * eV, 1.5244 * eV, 1.5266 * eV, 1.5287 * eV, 1.5309 * eV,
    1.5330 * eV, 1.5352 * eV, 1.5374 * eV, 1.5396 * eV, 1.5417 * eV, 1.5439 * eV,
    1.5461 * eV, 1.5483 * eV, 1.5528 * eV, 1.5550 * eV, 1.5572 * eV, 1.5594 * eV,
    1.5617 * eV, 1.5639 * eV, 1.5662 * eV, 1.5684 * eV, 1.5707 * eV, 1.5730 * eV,
    1.5753 * eV, 1.5775 * eV, 1.5798 * eV, 1.5821 * eV, 1.5844 * eV, 1.5868 * eV,
    1.5891 * eV, 1.5914 * eV, 1.5937 * eV, 1.5961 * eV, 1.5984 * eV, 1.6008 * eV,
    1.6031 * eV, 1.6055 * eV, 1.6079 * eV, 1.6103 * eV, 1.6127 * eV, 1.6150 * eV,
    1.6175 * eV, 1.6199 * eV, 1.6223 * eV, 1.6247 * eV, 1.6271 * eV, 1.6296 * eV,
    1.6320 * eV, 1.6345 * eV, 1.6369 * eV, 1.6394 * eV, 1.6419 * eV, 1.6444 * eV,
    1.6469 * eV, 1.6494 * eV, 1.6519 * eV, 1.6544 * eV, 1.6569 * eV, 1.6594 * eV,
    1.6620 * eV, 1.6645 * eV, 1.6671 * eV, 1.6696 * eV, 1.6722 * eV, 1.6748 * eV,
    1.6774 * eV, 1.6800 * eV, 1.6826 * eV, 1.6852 * eV, 1.6878 * eV, 1.6904 * eV,
    1.6930 * eV, 1.6957 * eV, 1.6983 * eV, 1.7010 * eV, 1.7036 * eV, 1.7063 * eV,
    1.7090 * eV, 1.7117 * eV, 1.7144 * eV, 1.7171 * eV, 1.7198 * eV, 1.7225 * eV,
    1.7253 * eV, 1.7280 * eV, 1.7308 * eV, 1.7335 * eV, 1.7363 * eV, 1.7391 * eV,
    1.7419 * eV, 1.7447 * eV, 1.7475 * eV, 1.7503 * eV, 1.7531 * eV, 1.7559 * eV,
    1.7588 * eV, 1.7616 * eV, 1.7645 * eV, 1.7674 * eV, 1.7702 * eV, 1.7760 * eV,
    1.7789 * eV, 1.7818 * eV, 1.7848 * eV, 1.7877 * eV, 1.7907 * eV, 1.7936 * eV,
    1.7966 * eV, 1.7995 * eV, 1.8025 * eV, 1.8055 * eV, 1.8085 * eV, 1.8115 * eV,
    1.8146 * eV, 1.8176 * eV, 1.8207 * eV, 1.8237 * eV, 1.8268 * eV, 1.8298 * eV,
    1.8329 * eV, 1.8360 * eV, 1.8391 * eV, 1.8423 * eV, 1.8454 * eV, 1.8485 * eV,
    1.8517 * eV, 1.8548 * eV, 1.8580 * eV, 1.8612 * eV, 1.8644 * eV, 1.8676 * eV,
    1.8708 * eV, 1.8740 * eV, 1.8773 * eV, 1.8805 * eV, 1.8838 * eV, 1.8870 * eV,
    1.8903 * eV, 1.8936 * eV, 1.8969 * eV, 1.9002 * eV, 1.9036 * eV, 1.9069 * eV,
    1.9102 * eV, 1.9136 * eV, 1.9170 * eV, 1.9204 * eV, 1.9238 * eV, 1.9272 * eV,
    1.9306 * eV, 1.9340 * eV, 1.9375 * eV, 1.9409 * eV, 1.9444 * eV, 1.9479 * eV,
    1.9514 * eV, 1.9549 * eV, 1.9584 * eV, 1.9620 * eV, 1.9655 * eV, 1.9691 * eV,
    1.9726 * eV, 1.9762 * eV, 1.9798 * eV, 1.9834 * eV, 1.9871 * eV, 1.9907 * eV,
    1.9944 * eV, 1.9980 * eV, 2.0017 * eV, 2.0054 * eV, 2.0091 * eV, 2.0128 * eV,
    2.0166 * eV, 2.0203 * eV, 2.0241 * eV, 2.0279 * eV, 2.0316 * eV, 2.0354 * eV,
    2.0393 * eV, 2.0431 * eV, 2.0469 * eV, 2.0508 * eV, 2.0547 * eV, 2.0586 * eV,
    2.0625 * eV, 2.0703 * eV, 2.0743 * eV, 2.0783 * eV, 2.0822 * eV, 2.0862 * eV,
    2.0902 * eV, 2.0943 * eV, 2.0983 * eV, 2.1024 * eV, 2.1064 * eV, 2.1105 * eV,
    2.1146 * eV, 2.1188 * eV, 2.1229 * eV, 2.1271 * eV, 2.1312 * eV, 2.1354 * eV,
    2.1396 * eV, 2.1438 * eV, 2.1481 * eV, 2.1523 * eV, 2.1566 * eV, 2.1609 * eV,
    2.1652 * eV, 2.1695 * eV, 2.1739 * eV, 2.1782 * eV, 2.1826 * eV, 2.1870 * eV,
    2.1914 * eV, 2.1958 * eV, 2.2003 * eV, 2.2047 * eV, 2.2092 * eV, 2.2137 * eV,
    2.2182 * eV, 2.2228 * eV, 2.2273 * eV, 2.2319 * eV, 2.2365 * eV, 2.2411 * eV,
    2.2457 * eV, 2.2504 * eV, 2.2550 * eV, 2.2597 * eV, 2.2644 * eV, 2.2692 * eV,
    2.2739 * eV, 2.2787 * eV, 2.2835 * eV, 2.2883 * eV, 2.2931 * eV, 2.2979 * eV,
    2.3028 * eV, 2.3077 * eV, 2.3126 * eV, 2.3175 * eV, 2.3225 * eV, 2.3275 * eV,
    2.3325 * eV, 2.3375 * eV, 2.3425 * eV, 2.3476 * eV, 2.3527 * eV, 2.3578 * eV,
    2.3629 * eV, 2.3680 * eV, 2.3732 * eV, 2.3784 * eV, 2.3836 * eV, 2.3889 * eV,
    2.3941 * eV, 2.3994 * eV, 2.4047 * eV, 2.4100 * eV, 2.4154 * eV, 2.4208 * eV,
    2.4262 * eV, 2.4316 * eV, 2.4371 * eV, 2.4425 * eV, 2.4480 * eV, 2.4536 * eV,
    2.4591 * eV, 2.4647 * eV, 2.4703 * eV, 2.4759 * eV, 2.4872 * eV, 2.4930 * eV,
    2.4987 * eV, 2.5044 * eV, 2.5102 * eV, 2.5160 * eV, 2.5219 * eV, 2.5277 * eV,
    2.5336 * eV, 2.5396 * eV, 2.5455 * eV, 2.5515 * eV, 2.5575 * eV, 2.5635 * eV,
    2.5696 * eV, 2.5757 * eV, 2.5818 * eV, 2.5879 * eV, 2.5941 * eV, 2.6003 * eV,
    2.6065 * eV, 2.6128 * eV, 2.6191 * eV, 2.6254 * eV, 2.6318 * eV, 2.6382 * eV,
    2.6446 * eV, 2.6510 * eV, 2.6575 * eV, 2.6640 * eV, 2.6706 * eV, 2.6772 * eV,
    2.6838 * eV, 2.6904 * eV, 2.6971 * eV, 2.7038 * eV, 2.7105 * eV, 2.7173 * eV,
    2.7241 * eV, 2.7310 * eV, 2.7379 * eV, 2.7448 * eV, 2.7517 * eV, 2.7587 * eV,
    2.7657 * eV, 2.7728 * eV, 2.7799 * eV, 2.7870 * eV, 2.7942 * eV, 2.8014 * eV,
    2.8086 * eV, 2.8159 * eV, 2.8232 * eV, 2.8305 * eV, 2.8379 * eV, 2.8454 * eV,
    2.8528 * eV, 2.8603 * eV, 2.8679 * eV, 2.8755 * eV, 2.8831 * eV, 2.8908 * eV,
    2.8985 * eV, 2.9062 * eV, 2.9140 * eV, 2.9218 * eV, 2.9297 * eV, 2.9376 * eV,
    2.9456 * eV, 2.9536 * eV, 2.9617 * eV, 2.9697 * eV, 2.9779 * eV, 2.9861 * eV,
    2.9943 * eV, 3.0026 * eV, 3.0109 * eV, 3.0192 * eV, 3.0277 * eV, 3.0361 * eV,
    3.0446 * eV, 3.0532 * eV, 3.0618 * eV, 3.0704 * eV, 3.0791 * eV, 3.0879 * eV,
    3.1055 * eV, 3.1144 * eV, 3.1234 * eV, 3.1324 * eV, 3.1414 * eV, 3.1505 * eV,
    3.1597 * eV, 3.1689 * eV, 3.1782 * eV, 3.1875 * eV, 3.1968 * eV, 3.2063 * eV,
    3.2158 * eV, 3.2253 * eV, 3.2349 * eV, 3.2446 * eV, 3.2543 * eV, 3.2640 * eV,
    3.2739 * eV, 3.2838 * eV, 3.2937 * eV, 3.3037 * eV, 3.3138 * eV, 3.3239 * eV,
    3.3341 * eV, 3.3444 * eV, 3.3547 * eV, 3.3651 * eV, 3.3756 * eV, 3.3861 * eV,
    3.3967 * eV, 3.4073 * eV, 3.4180 * eV, 3.4288 * eV, 3.4396 * eV, 3.4506 * eV,
    3.4616 * eV, 3.4726 * eV, 3.4837 * eV, 3.4949 * eV, 3.5062 * eV, 3.5176 * eV,
    3.5290 * eV, 3.5405 * eV, 3.5521 * eV, 3.5637 * eV, 3.5754 * eV, 3.5872 * eV,
    3.5991 * eV, 3.6111 * eV, 3.6231 * eV, 3.6352 * eV, 3.6474 * eV, 3.6597 * eV,
    3.6721 * eV, 3.6845 * eV, 3.6970 * eV, 3.7097 * eV, 3.7224 * eV, 3.7351 * eV,
    3.7480 * eV, 3.7610 * eV, 3.7741 * eV, 3.7872 * eV, 3.8004 * eV, 3.8138 * eV,
    3.8272 * eV, 3.8407 * eV, 3.8544 * eV, 3.8681 * eV,
  };
  
  std::vector<G4double> mppc_eff{
    0.0359, 0.0359, 0.0366, 0.0366, 0.0373, 0.0373, 0.0380, 0.0387,
    0.0387, 0.0394, 0.0401, 0.0401, 0.0409, 0.0416, 0.0416, 0.0423,
    0.0423, 0.0430, 0.0437, 0.0444, 0.0444, 0.0451, 0.0458, 0.0458,
    0.0466, 0.0473, 0.0473, 0.0480, 0.0487, 0.0494, 0.0494, 0.0501,
    0.0508, 0.0508, 0.0515, 0.0523, 0.0530, 0.0530, 0.0537, 0.0544,
    0.0551, 0.0551, 0.0558, 0.0565, 0.0572, 0.0572, 0.0580, 0.0587,
    0.0594, 0.0601, 0.0601, 0.0608, 0.0615, 0.0622, 0.0629, 0.0629,
    0.0637, 0.0644, 0.0651, 0.0658, 0.0658, 0.0665, 0.0672, 0.0679,
    0.0686, 0.0686, 0.0694, 0.0701, 0.0708, 0.0715, 0.0722, 0.0722,
    0.0729, 0.0736, 0.0743, 0.0751, 0.0758, 0.0765, 0.0765, 0.0772,
    0.0779, 0.0786, 0.0793, 0.0800, 0.0808, 0.0808, 0.0822, 0.0829,
    0.0836, 0.0843, 0.0850, 0.0857, 0.0865, 0.0865, 0.0872, 0.0879,
    0.0886, 0.0893, 0.0900, 0.0907, 0.0914, 0.0922, 0.0929, 0.0936,
    0.0943, 0.0957, 0.0964, 0.0971, 0.0979, 0.0979, 0.0986, 0.0993,
    0.1000, 0.1007, 0.1014, 0.1021, 0.1029, 0.1036, 0.1036, 0.1050,
    0.1064, 0.1071, 0.1078, 0.1086, 0.1093, 0.1100, 0.1107, 0.1121,
    0.1128, 0.1135, 0.1143, 0.1150, 0.1157, 0.1171, 0.1178, 0.1185,
    0.1192, 0.1200, 0.1214, 0.1221, 0.1228, 0.1235, 0.1249, 0.1257,
    0.1264, 0.1271, 0.1278, 0.1292, 0.1299, 0.1306, 0.1314, 0.1328,
    0.1335, 0.1342, 0.1349, 0.1363, 0.1371, 0.1378, 0.1392, 0.1399,
    0.1406, 0.1413, 0.1428, 0.1435, 0.1442, 0.1456, 0.1463, 0.1470,
    0.1477, 0.1492, 0.1499, 0.1506, 0.1520, 0.1534, 0.1549, 0.1556,
    0.1563, 0.1577, 0.1584, 0.1591, 0.1606, 0.1613, 0.1620, 0.1634,
    0.1641, 0.1656, 0.1663, 0.1677, 0.1684, 0.1691, 0.1705, 0.1713,
    0.1727, 0.1741, 0.1748, 0.1762, 0.1770, 0.1784, 0.1791, 0.1805,
    0.1812, 0.1827, 0.1834, 0.1848, 0.1855, 0.1869, 0.1876, 0.1891,
    0.1898, 0.1912, 0.1926, 0.1933, 0.1955, 0.1962, 0.1976, 0.1983,
    0.1998, 0.2005, 0.2019, 0.2033, 0.2040, 0.2055, 0.2076, 0.2083,
    0.2097, 0.2112, 0.2126, 0.2140, 0.2162, 0.2176, 0.2197, 0.2219,
    0.2233, 0.2254, 0.2276, 0.2290, 0.2311, 0.2333, 0.2347, 0.2361,
    0.2375, 0.2390, 0.2404, 0.2418, 0.2432, 0.2447, 0.2461, 0.2475,
    0.2489, 0.2504, 0.2511, 0.2525, 0.2539, 0.2553, 0.2561, 0.2575,
    0.2589, 0.2603, 0.2618, 0.2639, 0.2653, 0.2667, 0.2689, 0.2703,
    0.2717, 0.2732, 0.2746, 0.2760, 0.2781, 0.2796, 0.2810, 0.2824,
    0.2838, 0.2853, 0.2867, 0.2888, 0.2903, 0.2917, 0.2931, 0.2952,
    0.2967, 0.2974, 0.2988, 0.3010, 0.3024, 0.3038, 0.3052, 0.3067,
    0.3081, 0.3095, 0.3109, 0.3124, 0.3145, 0.3159, 0.3173, 0.3188,
    0.3202, 0.3216, 0.3230, 0.3245, 0.3259, 0.3280, 0.3295, 0.3309,
    0.3323, 0.3337, 0.3352, 0.3366, 0.3387, 0.3401, 0.3416, 0.3430,
    0.3444, 0.3466, 0.3480, 0.3494, 0.3508, 0.3523, 0.3537, 0.3551,
    0.3565, 0.3580, 0.3594, 0.3608, 0.3622, 0.3637, 0.3651, 0.3665,
    0.3672, 0.3686, 0.3701, 0.3715, 0.3722, 0.3736, 0.3751, 0.3758,
    0.3772, 0.3786, 0.3793, 0.3808, 0.3815, 0.3829, 0.3843, 0.3850,
    0.3857, 0.3865, 0.3879, 0.3886, 0.3893, 0.3900, 0.3907, 0.3907,
    0.3914, 0.3922, 0.3929, 0.3929, 0.3936, 0.3943, 0.3943, 0.3950,
    0.3957, 0.3957, 0.3964, 0.3971, 0.3971, 0.3979, 0.3979, 0.3986,
    0.3986, 0.3993, 0.3993, 0.4000, 0.4000, 0.4007, 0.4007, 0.4014,
    0.4014, 0.4014, 0.4014, 0.4014, 0.4021, 0.4021, 0.4014, 0.4014,
    0.4014, 0.4014, 0.4007, 0.4007, 0.4000, 0.3993, 0.3986, 0.3979,
    0.3979, 0.3971, 0.3964, 0.3957, 0.3943, 0.3936, 0.3929, 0.3922,
    0.3914, 0.3907, 0.3900, 0.3893, 0.3886, 0.3879, 0.3872, 0.3865,
    0.3857, 0.3850, 0.3843, 0.3829, 0.3822, 0.3808, 0.3800, 0.3786,
    0.3772, 0.3765, 0.3751, 0.3736, 0.3722, 0.3701, 0.3686, 0.3672,
    0.3658, 0.3644, 0.3629, 0.3615, 0.3601, 0.3587, 0.3572, 0.3558,
    0.3530, 0.3508, 0.3494, 0.3480, 0.3458, 0.3437, 0.3409, 0.3387,
    0.3359, 0.3330, 0.3302, 0.3273, 0.3245, 0.3209, 0.3181, 0.3145,
    0.3109, 0.3074, 0.3038, 0.3002, 0.2967, 0.2938, 0.2895, 0.2860,
    0.2824, 0.2789, 0.2753, 0.2710, 0.2675, 0.2639, 0.2610, 0.2575,
    0.2539, 0.2504, 0.2468, 0.2432, 0.2397, 0.2354, 0.2318, 0.2276,
    0.2233, 0.2190, 0.2147, 0.2097, 0.2040, 0.1976, 0.1912, 0.1841,
    0.1770, 0.1691, 0.1606, 0.1520, 0.1435, 0.1356, 0.1271, 0.1185,
    0.1107, 0.1029, 0.0950, 0.0872, 0.0800, 0.0729, 0.0658, 0.0594,
    0.0530, 0.0473, 0.0437, 0.0401, 0.0373, 0.0352
  };  

  auto graph = new TGraph(photon_energy.size(), &photon_energy[0], &mppc_eff[0]);
  m_qe_spline = new TSpline3("qe_spline", graph);
  m_range_min = m_qe_spline->GetXmin();
  m_range_max = m_qe_spline->GetXmax();

  delete graph;
}
